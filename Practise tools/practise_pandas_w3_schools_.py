# -*- coding: utf-8 -*-
"""Practise_Pandas_W3 schools .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/174DFGgJAFrmdmcoQVKraF6Mcgptv-lwF
"""

## create dataframe using data

import pandas as pd

data = { "name" : ["akhil","shaik","mohammad","waris","abdul"],"age":[40,-50,60,70,80],"salary":[3000,4000,10000,20000,50000]}

pd.DataFrame(data)

## Specify indexes


import pandas as pd

data = { "name" : ["akhil","shaik","mohammad","waris","abdul"],"age":[40,50,60,70,80],"salary":[3000,4000,10000,20000,50000]}


df = pd.DataFrame(data,index=[1,2,3,4,5])

print(df)

# abs() - return the absolute values


print(df)

print(df["age"].abs())

# add - add the  values

df["age"].add(15)

# add prefix

y = df.add_prefix("Ind_")

print(y)

# all() - returns true if all values are true

print(df)
df.all()

# add a column  by assign ()

new_df_assign= df.assign(city= ["chn","Bom","Hyd","Ban","Vzg"])

print(new_df_assign)

## add a data frame at the end of  another data frame

## ignore _ index use for ignore the original indexes and it will be named as 0,1,2.........

data={"city":["chn","Bom","Hyd","Ban","Vzg"]}

df1=pd.DataFrame(data)

print(df1)

df.append(df1,ignore_index="True")

## at is uded for access the single value

print(df)

df.at[5,"age"]

## return lables of rows and columns

y= df.axes

print(y)

## columns

y = df.columns

print((y))

## correlation

x_corr =df.corr()

print(x_corr)

# count()- ( Keyword arguments)- (axis = 0 or 1) numeric_only = True or False(default)

x_countall=df.count()
x_count=df.count(numeric_only = True)


print(df)
print(x_countall)


print( x_count)

x_count[0]

# cummax() and cummin() - KW args - axis = 0 or 1 , skip_na

df_max = df.cummax(skipna=False)

print(df_max)


df_min = df.cummin()

print(df_min)

# describe()

print(df)

print(df["age"].describe())

df["age"].describe()[0]

## diff() and also drop()

print(df)

df_won = df.drop(["name","name_city"],axis=1)

x_diff=df_won.diff()

print(x_diff)

## drop : specific row or column , KWargs ... row_name/ column_name , axis = 0 or 1 , inplace = True or False

print(df)

df_won1 = df.drop(1)

print(df_won1)

## dtypes

print(df)

print(df.dtypes)

## duplicates


print(df)

x= df.duplicated(subset="age")

print(x)

## eq()

print(df)

x_eq = df.eq(df.at[1,"age"])

print(x_eq)

## filter the data :: default axis = 1

print(df)

df_filter = df.filter(items=["name","age"])

print(df_filter)

## iat :: i- index -KWargs = [row_index , column_index] - For getting value at that cell

print(df)

x_iat = df.iat[0,2]

print(x_iat)

## iloc: i: index

print(df)

x_iloc = df.iloc[0:5]

print(x_iloc)

# index

x_ind=df.index

print(x_ind)

## info()

x_info=df.info()

print(x_info)

# insert () ___ KWargs :- insert(position, column_name, values(List,tuple))

df.insert(3,"name_city",["Mum","Chn","Vzg","Ban","Del"])

print(df)

print(df)

#isnull()

print(df)

x_null = df.isnull()

print(x_null)

# items() == iteritems() : return column label and respective content as series

for x , y in df.items():
  print(x)
  print(y)

# loc

print((df))

x_loc = df.loc[1:4]  # include up  to 4 th column ..reg only location

print(x_loc)

x_loc_value = df.loc[1,"age"]

print(x_loc_value)

x_loc_series = df.loc[1]

print(x_loc_series)

## where ():: KWargs (condn, other (no,string) , inplace))

# if it is false then  all values will be NaN


x_where = df.where( df["age"]>50, 60 )

print(x_where)

x_where["age"].value_counts()

## tail()

x_tail = df.tail((3))

print(x_tail)

## transporse()

x_transpose = df.transpose()

print(x_transpose)

## sum () :: KWargs: axis = 0 or 1 , skip_na - True (default) or False , numeric_only

print(df)

df.sum(numeric_only=False,axis="index")

## squeeze() :: single column in to series: data frame in to data frame only

x_squeeze = df.squeeze(axis = 0)

print(x_squeeze)

## stack() - wide dataframe in to long table

x_stack = df.stack()


print(x_stack)

## nunique()

print(df)

print(df.nunique())

### unique()

print(df)

print(df["age"].unique())

print(df["age"])

## value counts on columns

df["salary"].value_counts()

## groupby

df.groupby(by="age")["salary"].mean()

## apply


def sum(x):
  return(x+40)

print(df["age"].apply(sum))

# lambda function : square of a number

sq_no = lambda a : a**2

sq_no(3)



















